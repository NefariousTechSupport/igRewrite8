using System;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using System.IO;
using System.Threading;
using System.Diagnostics;

namespace igLibrary.CodeGen
{
	[Generator]
	public class ArrayMetaFieldGenerator : ISourceGenerator
	{
		public void Execute(GeneratorExecutionContext context)
		{
			ParseNamespace(context, context.Compilation.SourceModule.GlobalNamespace);
		}

		private void ParseNamespace(GeneratorExecutionContext context, INamespaceSymbol ns)
		{
			Debug.WriteLine("Parsing namespace " + ns.ToDisplayString());
			foreach(INamespaceSymbol curNs in ns.GetNamespaceMembers())
			{
				ImmutableArray<INamedTypeSymbol> types = curNs.GetTypeMembers();

				foreach(INamedTypeSymbol type in types)
				{
					ParseType(context, type);
				}

				if(curNs.Name.StartsWith("igLibrary"))
				{
					ParseNamespace(context, curNs);
				}
			}
		}

		private void ParseType(GeneratorExecutionContext context, INamedTypeSymbol type)
		{
			if(!IsAssignableTo(type, "igMetaField") || type.Name == "igMetaField")
			{
				return;
			}

			string arrayTypeName = type.Name.Substring(0, type.Name.Length - 9) + "ArrayMetaField";

			Debug.WriteLine("Generating source for " + arrayTypeName);

			string source = 
$@"// Autogenerated file
#nullable enable
namespace {type.ContainingNamespace.ToDisplayString()}
{{
	public class {arrayTypeName} : {type.Name}
	{{
		public short _num;
		public override object? ReadIGZField(igIGZLoader loader)
		{{
			Array data = Array.CreateInstance(base.GetOutputType(), _num);
			for(int i = 0; i < _num; i++)
			{{
				data.SetValue(base.ReadIGZField(loader), i);
			}}
			return data;
		}}
		public override void WriteIGZField(igIGZSaver saver, igIGZSaver.SaverSection section, object? value)
		{{
			Array data = (Array)value;
			for(int i = 0; i < _num; i++)
			{{
				base.WriteIGZField(saver, section, data.GetValue(i));
			}}
		}}
		public override uint GetSize(IG_CORE_PLATFORM platform)
		{{
			return base.GetSize(platform) * (uint)_num;
		}}
		public override Type GetOutputType()
		{{
			return base.GetOutputType().MakeArrayType();
		}}
	}}
}}
#nullable disable
";
			context.AddSource(arrayTypeName + ".g.cs", source);
		}

		private bool IsAssignableTo(INamedTypeSymbol type, string typeName)
		{
			INamedTypeSymbol currentType = type;

			do
			{
				if(currentType.Name == typeName)
				{
					return true;
				}

				currentType = currentType.BaseType;
			} while(currentType != null);

			return false;
		}

		public void Initialize(GeneratorInitializationContext context)
		{
#if DEBUG_SOURCEGEN
			while (!Debugger.IsAttached)
			{
				Thread.Sleep(500);
			}
#endif // DEBUG_SOURCEGEN

			Debug.WriteLine("Initalize code generator");
		}
	}
}