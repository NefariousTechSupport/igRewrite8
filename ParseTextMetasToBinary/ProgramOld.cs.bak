using System.IO;

namespace PTMTB
{
	public static class ProgramOld
	{
		public static void MainOld(string[] args)
		{
			StreamHelper objSh = new StreamHelper(new FileStream(args[0], FileMode.Open, FileAccess.Read));
			StreamHelper enumSh = new StreamHelper(new FileStream(args[1], FileMode.Open, FileAccess.Read));

			while(true)
			{
				igMetaObject meta = new igMetaObject();
				string metaObjectLine = objSh.ReadLine();
				if(metaObjectLine.Length == 0) break;
				meta._name = metaObjectLine.Split(' ')[1];
				objSh.ReadLine();
				objSh.ReadLine();
				while(true)
				{
					string memberLine = objSh.ReadLine();
					if(memberLine[0] == '}') break;
					string[] memberInfo = memberLine.Substring(1).Split(' ');
					
					igMetaField metaField = ReadFieldType(memberInfo[0]);
				}
				igArkCore._metaObjects.Add(meta);
			}

			while(true)
			{
				igMetaEnum metaEnum = new igMetaEnum();
				string metaEnumLine = enumSh.ReadLine();
				if(metaEnumLine.Length == 0) break;
				metaEnum._name = metaEnumLine.Split(' ')[1];
				enumSh.ReadLine();
				while(true)
				{
					string memberLine = enumSh.ReadLine();
					if(memberLine[0] == '}') break;
					string[] memberInfo = memberLine.Substring(1).Split(' ');
					metaEnum._names.Add(memberInfo[0]);
					metaEnum._values.Add(int.Parse(memberInfo[2].TrimEnd(',')));
				}
				igArkCore._metaEnums.Add(metaEnum);
			}

			igArkCore.WriteToFile(igArkCore.EGame.EV_SkylandersSuperchargers);

			igArkCore.Reset();

			igArkCore.ReadFromFile(igArkCore.EGame.EV_SkylandersSuperchargers);

			return;
		}
		private static igMetaField ReadFieldType(string data, int startIndex = 0)
		{
			int index = Array.FindIndex<char>(data.ToCharArray(), startIndex, data.Length - startIndex, x => x == '<' || x == '>' || x == '[');
			string fieldType;
			if(index < 0)
			{
				fieldType = data;
			}
			else
			{
				fieldType = data.Substring(startIndex, ++index - startIndex);
				startIndex = index;
			}
			igMetaField? metafield = null;
			if(data.StartsWith("igObjectRef"))
			{
				index = Array.FindIndex<char>(data.ToCharArray(), startIndex, data.Length - startIndex, x => x == '>');
				string metaObjectName = data.Substring(startIndex, ++index - startIndex);
				startIndex = index;
				metafield = new igObjectRefMetaField() { _metaObjectName = metaObjectName};
			}
			else if(data.StartsWith("igHandle") && !data.StartsWith("igHandleName"))
			{
				index = Array.FindIndex<char>(data.ToCharArray(), startIndex, data.Length - startIndex, x => x == '>');
				string metaObjectName = data.Substring(startIndex, ++index - startIndex);
				startIndex = index;
				metafield = new igHandleMetaField() { _metaObjectName = metaObjectName};
			}
			/*else if(data.StartsWith("igVector"))
			{
				index = Array.FindIndex<char>(data.ToCharArray(), startIndex, data.Length - startIndex, x => x == '>');
				string metaObjectName = data.Substring(startIndex, ++index - startIndex);
				startIndex = index;
				metafield = new igVectorMetaField() { _memType = ReadFieldType(metaObjectName) };
			}*/
			else if(data.StartsWith("igMemoryRefHandle"))
			{
				index = Array.FindIndex<char>(data.ToCharArray(), startIndex, data.Length - startIndex, x => x == '>');
				string metaObjectName = data.Substring(startIndex, ++index - startIndex);
				startIndex = index;
				metafield = new igMemoryRefHandleMetaField() { _memType = ReadFieldType(metaObjectName) };
			}
			else if(data.StartsWith("igMemoryRef"))
			{
				index = Array.FindIndex<char>(data.ToCharArray(), startIndex, data.Length - startIndex, x => x == '>');
				string metaObjectName = data.Substring(startIndex, ++index - startIndex);
				startIndex = index;
				metafield = new igMemoryRefMetaField() { _memType = ReadFieldType(metaObjectName) };
			}
			
			if(metafield == null)
			{
				metafield = new igMetaField();
			}

			metafield._typeName = fieldType;

			return metafield;
		}
	}
}